diff --git a/../pouchdb/lib/replicate.js b/replicate.js
index 109f199..f074a89 100644
--- a/../pouchdb/lib/replicate.js
+++ b/replicate.js
@@ -1,9 +1,19 @@
+/**
+ * replicate.js modded to use _bulk_get
+ */
+
 'use strict';
 
-var utils = require('./utils');
+var extend = require('pouchdb-extend');
+var utils = require('../pouchdb/lib/utils');
 var EE = require('events').EventEmitter;
-var Checkpointer = require('./checkpointer');
 
+utils.clone = function (obj) {
+  return extend(true, {}, obj);
+};
+
+var EE = require('events').EventEmitter;
+var Checkpointer = require('../pouchdb/lib/checkpointer');
 var MAX_SIMULTANEOUS_REVS = 50;
 var RETRY_DEFAULT = false;
 
@@ -245,12 +255,70 @@ function replicate(repId, src, target, opts, returnValue, result) {
     }));
   }
 
+  /**
+   * Fetch all the docs in currentBatch at once.
+   * Should only be called if src.getBulk exists.
+   */
+  function getAllDocsBulk(ids) {
+    var parameters = [],
+        id,
+        diffs = currentBatch.diffs,
+        allMissing,
+        missingBatches,
+        missingBatch;
+
+    for(var idx = 0; idx < ids.length; idx++) {
+      id = ids[idx];
+      allMissing = diffs[id].missing;
+
+      // avoid url too long error by batching; this process still does
+      // individual GET requests in the back end.
+      missingBatches = [];
+      for (var i = 0; i < allMissing.length; i += MAX_SIMULTANEOUS_REVS) {
+        missingBatches.push(allMissing.slice(i, Math.min(allMissing.length,
+          i + MAX_SIMULTANEOUS_REVS)));
+      }
+
+      for (var i = 0; i < missingBatches.length; i++) {
+        missingBatch = missingBatches[i];
+        for (var j = 0; j < missingBatch.length; j++) {
+          parameters.push({id: id, open_revs: missingBatch,
+                           revs: true, attachments: true});
+        }
+      }
+    }
+
+    return src.getBulk(parameters).then(function (docIds) {
+      // Would it be better to callback one doc at a time?
+      docIds.forEach(function(docs) {
+        docs.forEach(function (doc) {
+          if (returnValue.cancelled) {
+            return completeReplication();
+          }
+          if (doc.ok) {
+            result.docs_read++;
+            currentBatch.pendingRevs++;
+            currentBatch.docs.push(doc.ok);
+            delete currentBatch.diffs[doc.ok._id];
+          }
+        });
+      });
+    });
+  }
+
+  var bulkFailed = false;
   function getAllDocs() {
     var diffKeys = Object.keys(currentBatch.diffs);
-    return utils.Promise.all(diffKeys.map(processDiffDoc));
+    if (diffKeys.length && src.getBulk && !bulkFailed) {
+        return getAllDocsBulk(diffKeys).catch(function(e) {
+          bulkFailed = true;
+          return getAllDocs();
+        });
+    } else {
+      return utils.Promise.all(diffKeys.map(processDiffDoc));
+    }
   }
 
-
   function getRevisionOneDocs() {
     // filter out the generation 1 docs and get them
     // leaving the non-generation one docs to be got otherwise
